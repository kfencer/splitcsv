#!/usr/bin/php
<?php

const NAME = 'csvsplit';
const VERSION = '1.0.0';
const DESCRIPTION = 'split a CSV file into pieces';

const TITLE = NAME . ' ' . VERSION . ' - ' . DESCRIPTION;

const HELP_MESSAGE = <<<EOH
    cat FILE | ./splitcsv.php [OPTION]... [- [PREFIX]]    
    
    Output pieces of FILE to PREFIX00, PREFIX01, ...; default size is 1000 lines, and default PREFIX is 'x'.
    
    Read standard input.
    
    params:
        --copy-header
            copy header to each output file
            
        -l N
            put NUMBER lines/records per output 
            
        -a N
            generate suffixes of length N (default 2)

       --additional-suffix=SUFFIX
            append an additional SUFFIX to file names
            
       --help
           display this help and exit
           
       --version
           output version information and exit


EOH;

const DEFAULT_POSTFIX_LENGTH = 2;
const DEFAULT_LINE_NUMBER = 1000;
const DEFAULT_PREFIX = 'x';

function error(string $message, int $code = 1): void {
    fwrite(STDERR, "$message\n");
    exit($code);
}

if (version_compare(PHP_VERSION, '7.4.0', '<')) {
    error('php >= 7.4.0 required');
}

function badParamsError(): void {
    fwrite(STDERR, "Bad params!\n\n");
    error(HELP_MESSAGE);
}

/**
 * @param string[] $argv
 */
function parseArgs(array $argv): array {
    $copyHeader = false;
    $lineNumbers = DEFAULT_LINE_NUMBER;
    $postfixLength = DEFAULT_POSTFIX_LENGTH;
    $additionalSuffix = '';
    $prefix = DEFAULT_PREFIX;

    $setNextVal = null;

    foreach ($argv as $key => $arg) {
        if ($key ===0) {
            continue;
        }

        if ($setNextVal instanceof Closure) {
            $setNextVal($arg);
            $setNextVal = null;
            continue;
        }

        switch (true) {
            case ($arg === '--help'):
                echo TITLE, "\n\n", HELP_MESSAGE;
                exit(0);
            case ($arg === '--version'):
                echo TITLE, "\n";
                exit(0);
            case $arg === '--copy-header':
                $copyHeader = true;
                break;
            case $arg === '-l';
                $setNextVal = static function(string $val) use(&$lineNumbers): void {
                    $lineNumbers = (int) $val;
                };
                break;
            case $arg === '-a';
                $setNextVal = static function(string $val) use(&$postfixLength): void {
                    $postfixLength = (int) $val;
                };
                break;
            case preg_match('~^\-\-additional\-suffix=(.*)$~', $arg, $matches):
                $additionalSuffix = $matches[1];
                break;
            case $arg === '-';
                $setNextVal = static function(string $val) use(&$prefix): void {
                    $prefix = $val;
                };
                break;
            default:
                badParamsError();
        }
    }

    if ($lineNumbers < 1 || $postfixLength < 1) {
        badParamsError();
    }

    return [
        $copyHeader,
        $lineNumbers,
        $postfixLength,
        $additionalSuffix,
        $prefix
    ];
}

function process(
    bool $copyHeader,
    int $lineNumbers,
    int $postfixLength,
    string $additionalSuffix,
    string $prefix
): void {
    if ($copyHeader) {
        $header = fgetcsv(STDIN);

        if (!is_array($header)) {
            return;
        }
    } else {
        $header = null;
    }

    $line = 1;
    $file = 0;

    $handler = null;

    while(($row = fgetcsv(STDIN)) !== false) {
        if ($handler === null) {
            $fileName = $prefix . str_pad((string) $file, $postfixLength, '0', STR_PAD_LEFT) . $additionalSuffix;
            $handler = fopen($fileName, 'wb');

            if ($copyHeader) {
                fputcsv($handler, $header);
            }
        }

        fputcsv($handler, $row);
        $line++;

        if ($line === $lineNumbers) {
            fclose($handler);
            $line = 1;
            $handler = null;
            $file++;
        }
    }

    if ($handler !== null) {
        fclose($handler);
    }
}

process(... parseArgs($argv));
